{
  "version": 3,
  "sources": ["../bundle-AcaGHP/checked-fetch.js", "../../../scripts/cloudflare-update-tournament.js", "../../../../../../../opt/homebrew/lib/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../../../../../../../opt/homebrew/lib/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../bundle-AcaGHP/middleware-insertion-facade.js", "../../../../../../../opt/homebrew/lib/node_modules/wrangler/templates/middleware/common.ts", "../bundle-AcaGHP/middleware-loader.entry.ts"],
  "sourceRoot": "/Volumes/icecop15/apps/MajorsPool/.wrangler/tmp/dev-5PoEbh",
  "sourcesContent": ["const urls = new Set();\n\nfunction checkURL(request, init) {\n\tconst url =\n\t\trequest instanceof URL\n\t\t\t? request\n\t\t\t: new URL(\n\t\t\t\t\t(typeof request === \"string\"\n\t\t\t\t\t\t? new Request(request, init)\n\t\t\t\t\t\t: request\n\t\t\t\t\t).url\n\t\t\t\t);\n\tif (url.port && url.port !== \"443\" && url.protocol === \"https:\") {\n\t\tif (!urls.has(url.toString())) {\n\t\t\turls.add(url.toString());\n\t\t\tconsole.warn(\n\t\t\t\t`WARNING: known issue with \\`fetch()\\` requests to custom HTTPS ports in published Workers:\\n` +\n\t\t\t\t\t` - ${url.toString()} - the custom port will be ignored when the Worker is published using the \\`wrangler deploy\\` command.\\n`\n\t\t\t);\n\t\t}\n\t}\n}\n\nglobalThis.fetch = new Proxy(globalThis.fetch, {\n\tapply(target, thisArg, argArray) {\n\t\tconst [request, init] = argArray;\n\t\tcheckURL(request, init);\n\t\treturn Reflect.apply(target, thisArg, argArray);\n\t},\n});\n", "// Cloudflare Worker script for updating tournament data\n// This is a standalone script that includes all necessary functions\n\n// Type definitions\n/**\n * @typedef {Object} GolferScore\n * @property {string} player_id\n * @property {string} [first_name]\n * @property {string} [last_name]\n * @property {string} total\n * @property {string} position\n */\n\n// PGA Tour API client\nconst API_CONFIG = {\n  orgId: '1',  // PGA Tour\n  baseUrl: 'https://live-golf-data.p.rapidapi.com',\n  headers: {\n    'x-rapidapi-host': 'live-golf-data.p.rapidapi.com',\n    'x-rapidapi-key': '4053a88438msh3d3dd8247f6707fp12e8e0jsne0eb00858f8d',\n  }\n};\n\n/**\n * Fetch data from PGA Tour API\n * @param {string} endpoint - API endpoint\n * @param {Record<string, string>} params - Query parameters\n * @returns {Promise<any>} - API response\n */\nasync function pgaFetch(endpoint, params = {}) {\n  const queryString = new URLSearchParams({\n    ...params,\n    orgId: API_CONFIG.orgId,\n  }).toString();\n\n  const url = `${API_CONFIG.baseUrl}${endpoint}?${queryString}`;\n  \n  try {\n    const response = await fetch(url, { \n      method: 'GET',\n      headers: API_CONFIG.headers \n    });\n    \n    const result = await response.text();\n    return JSON.parse(result);\n  } catch (error) {\n    console.error('API Error:', error);\n    throw error;\n  }\n}\n\n/**\n * Get tournament data\n * @param {string} tournId - Tournament ID\n * @returns {Promise<any>} - Tournament data\n */\nasync function getTournament(tournId) {\n  return pgaFetch('/tournament', {\n    tournId,\n    year: '2025'  // You might want to make this parameter configurable\n  });\n}\n\n/**\n * Get tournament leaderboard\n * @param {string} tournId - Tournament ID\n * @returns {Promise<any>} - Leaderboard data\n */\nasync function getTournamentLeaderboard(tournId) {\n  const response = await pgaFetch('/leaderboard', {\n    tournId,\n    year: '2025'\n  });\n  \n  return response;\n}\n\n/**\n * Calculate entry score\n * @param {GolferScore[]} golferScores - Array of golfer scores\n * @returns {number} - Calculated score\n */\nfunction calculateEntryScore(golferScores) {\n  // Convert scores to numbers, handling special cases\n  const numericScores = golferScores.map(golfer => {\n    if (['CUT', 'WD', 'DQ'].includes(golfer.position)) {\n      return 99;\n    }\n    if (golfer.total === 'E') return 0;\n    return golfer.total.startsWith('-') \n      ? -Number(golfer.total.slice(1)) \n      : Number(golfer.total.replace('+', ''));\n  });\n\n  // Sort scores from lowest to highest\n  numericScores.sort((a, b) => a - b);\n\n  // Calculate weighted scores (for tiebreaker)\n  let weightedScore = 0;\n  numericScores.forEach((score, index) => {\n    const divisor = Math.pow(10, (index + 3)); // Starts at 1000 and increases\n    weightedScore += score / divisor;\n  });\n\n  // Take best 5 scores and sum them\n  const bestFiveSum = numericScores.slice(0, 5).reduce((sum, score) => sum + score, 0);\n\n  // Combine both scores - raw sum for display, weighted for tiebreakers\n  return bestFiveSum + weightedScore;\n}\n\n/**\n * Create Supabase client\n * @param {string} supabaseUrl - Supabase URL\n * @param {string} supabaseKey - Supabase API key\n * @returns {Object} - Supabase client\n */\nfunction createSupabaseClient(supabaseUrl, supabaseKey) {\n  // This is a simplified version of the Supabase client\n  // In Cloudflare, you'll need to use fetch directly\n  return {\n    from: (table) => ({\n      select: (columns) => ({\n        eq: (column, value) => ({\n          single: async () => {\n            try {\n              console.log(`Executing single query for ${table} where ${column}=${value}`);\n              const response = await fetch(`${supabaseUrl}/rest/v1/${table}?select=${columns}&${column}=eq.${value}`, {\n                headers: {\n                  'apikey': supabaseKey,\n                  'Authorization': `Bearer ${supabaseKey}`,\n                  'Content-Type': 'application/json'\n                }\n              });\n              \n              if (!response.ok) {\n                console.error(`Supabase error (${response.status}): ${response.statusText}`);\n                return { data: null, error: { message: response.statusText } };\n              }\n              \n              const data = await response.json().catch(e => {\n                console.error('JSON parse error:', e);\n                return [];\n              });\n              \n              if (!Array.isArray(data)) {\n                console.warn(`Expected array but got ${typeof data}`);\n                return { data: null, error: null };\n              }\n              \n              return { data: data[0] || null, error: null };\n            } catch (error) {\n              console.error('Single query error:', error);\n              return { data: null, error: { message: String(error) } };\n            }\n          },\n          execute: async () => {\n            try {\n              console.log(`Executing query for ${table} where ${column}=${value}`);\n              const response = await fetch(`${supabaseUrl}/rest/v1/${table}?select=${columns}&${column}=eq.${value}`, {\n                headers: {\n                  'apikey': supabaseKey,\n                  'Authorization': `Bearer ${supabaseKey}`,\n                  'Content-Type': 'application/json'\n                }\n              });\n              \n              if (!response.ok) {\n                console.error(`Supabase error (${response.status}): ${response.statusText}`);\n                return { data: [], error: { message: response.statusText } };\n              }\n              \n              const data = await response.json().catch(e => {\n                console.error('JSON parse error:', e);\n                return [];\n              });\n              \n              if (!Array.isArray(data)) {\n                console.warn(`Expected array but got ${typeof data}`);\n                return { data: [], error: null };\n              }\n              \n              return { data, error: null };\n            } catch (error) {\n              console.error('Execute error:', error);\n              return { data: [], error: { message: String(error) } };\n            }\n          }\n        })\n      }),\n      update: (data) => ({\n        eq: async (column, value) => {\n          const response = await fetch(`${supabaseUrl}/rest/v1/${table}?${column}=eq.${value}`, {\n            method: 'PATCH',\n            headers: {\n              'apikey': supabaseKey,\n              'Authorization': `Bearer ${supabaseKey}`,\n              'Content-Type': 'application/json',\n              'Prefer': 'return=minimal'\n            },\n            body: JSON.stringify(data)\n          });\n          \n          if (!response.ok) {\n            const error = await response.json();\n            return { error };\n          }\n          \n          return { error: null };\n        }\n      }),\n      insert: async (data) => {\n        const response = await fetch(`${supabaseUrl}/rest/v1/${table}`, {\n          method: 'POST',\n          headers: {\n            'apikey': supabaseKey,\n            'Authorization': `Bearer ${supabaseKey}`,\n            'Content-Type': 'application/json',\n            'Prefer': 'return=minimal'\n          },\n          body: JSON.stringify(data)\n        });\n        \n        if (!response.ok) {\n          const error = await response.json();\n          return { error };\n        }\n        \n        return { error: null };\n      },\n      upsert: async (data, options = {}) => {\n        // Log the upsert operation for debugging\n        console.log(`Upserting ${Array.isArray(data) ? data.length : 1} records to ${table}`);\n        console.log('Upsert options:', options);\n        \n        let url = `${supabaseUrl}/rest/v1/${table}`;\n        \n        // Handle onConflict parameter\n        if (options.onConflict) {\n          url += `?on_conflict=${options.onConflict}`;\n        }\n        \n        console.log('Upsert URL:', url);\n        \n        const response = await fetch(url, {\n          method: 'POST',\n          headers: {\n            'apikey': supabaseKey,\n            'Authorization': `Bearer ${supabaseKey}`,\n            'Content-Type': 'application/json',\n            'Prefer': 'resolution=merge-duplicates,return=minimal'\n          },\n          body: JSON.stringify(data)\n        });\n        \n        if (!response.ok) {\n          const errorData = await response.json().catch(() => ({ \n            message: response.statusText,\n            status: response.status \n          }));\n          console.error(`Upsert error (${response.status}):`, errorData);\n          return { error: errorData };\n        }\n        \n        return { error: null };\n      }\n    })\n  };\n}\n\n/**\n * Main function to update tournament data\n * @param {Object} env - Cloudflare environment variables\n * @returns {Promise<Object>} - Result of the update\n */\nasync function updateTournament(env) {\n  try {\n    // Create Supabase client\n    const supabaseAdmin = createSupabaseClient(\n      env.SUPABASE_URL,\n      env.SUPABASE_ANON_KEY\n    );\n\n    // Get the active tournament first\n    const { data: activeTournament, error: tournamentError } = await supabaseAdmin\n      .from('tournaments')\n      .select('id,name,pga_tournament_id')\n      .eq('is_active', true)\n      .single();\n\n    if (tournamentError || !activeTournament) {\n      throw new Error('No active tournament found');\n    }\n\n    // 1. Update tournament status and current round\n    const tournamentData = await getTournament(activeTournament.pga_tournament_id);\n    \n    // 2. Get leaderboard data (moved up to combine with tournament status update)\n    const leaderboard = await getTournamentLeaderboard(activeTournament.pga_tournament_id);\n    \n    // Extract cut score from cutLines array\n    const cutScore = leaderboard.cutLines?.[0]?.cutScore;\n    \n    // Update tournament status, current round, and cut score in a single database call\n    const { error: updateTournamentError } = await supabaseAdmin\n      .from('tournaments')\n      .update({\n        status: tournamentData.status,\n        current_round: tournamentData.currentRound.$numberInt || tournamentData.currentRound,\n        cut_score: cutScore || null // Include cut score in the same update\n      })\n      .eq('id', activeTournament.id);\n\n    if (updateTournamentError) {\n      throw updateTournamentError;\n    }\n\n    if (!leaderboard.leaderboardRows?.length) {\n      throw new Error('No players found in leaderboard');\n    }\n\n    // Process players in batches to reduce subrequests\n    console.log(`Processing ${leaderboard.leaderboardRows.length} players in batches`);\n    \n    // First, get all existing players in one request\n    const { data: existingPlayers, error: existingPlayersError } = await supabaseAdmin\n      .from('golfer_scores')\n      .select('player_id')\n      .eq('tournament_id', activeTournament.id)\n      .execute();\n    \n    if (existingPlayersError) {\n      console.error('Error fetching existing players:', existingPlayersError);\n      throw new Error(`Failed to fetch existing players: ${JSON.stringify(existingPlayersError)}`);\n    }\n    \n    // Create a map of existing player IDs for quick lookup\n    const existingPlayerMap = new Map();\n    if (existingPlayers && Array.isArray(existingPlayers)) {\n      console.log(`Found ${existingPlayers.length} existing players`);\n      existingPlayers.forEach(player => {\n        if (player && player.player_id) {\n          existingPlayerMap.set(player.player_id, true);\n        }\n      });\n    } else {\n      console.log('No existing players found or existingPlayers is not an array:', existingPlayers);\n    }\n    \n    // Prepare batches of players to insert and update\n    const playersToInsert = [];\n    const playersToUpdate = [];\n    \n    for (const player of leaderboard.leaderboardRows) {\n      const playerData = {\n        last_name: player.lastName,\n        first_name: player.firstName,\n        player_id: player.playerId,\n        is_amateur: player.isAmateur || false,\n        course_id: player.courseId,\n        status: player.status,\n        position: player.position,\n        total: player.total,\n        current_round_score: player.currentRoundScore || null,\n        current_hole: player.currentHole?.$numberInt ? Number(player.currentHole.$numberInt) : null,\n        starting_hole: player.startingHole?.$numberInt ? Number(player.startingHole.$numberInt) : null,\n        round_complete: player.roundComplete,\n        thru: player.thru,\n        current_round: player.currentRound?.$numberInt ? Number(player.currentRound.$numberInt) : null,\n        tee_time: player.teeTime || null,\n        tournament_id: activeTournament.id\n      };\n      \n      if (existingPlayerMap.has(player.playerId)) {\n        playersToUpdate.push(playerData);\n      } else {\n        playersToInsert.push(playerData);\n      }\n    }\n    \n    // Insert new players in one batch request (if any)\n    if (playersToInsert.length > 0) {\n      console.log(`Inserting ${playersToInsert.length} new players in batch`);\n      const { error: insertError } = await supabaseAdmin\n        .from('golfer_scores')\n        .insert(playersToInsert);\n      \n      if (insertError) {\n        throw insertError;\n      }\n    }\n    \n    // Update existing players in batches of 10\n    if (playersToUpdate.length > 0) {\n      console.log(`Updating ${playersToUpdate.length} existing players`);\n      \n      // Since Supabase doesn't support bulk updates directly, we need to use UPSERT\n      // which will update existing records based on the primary key\n      try {\n        // First try with the compound key\n        const { error: updateError } = await supabaseAdmin\n          .from('golfer_scores')\n          .upsert(playersToUpdate, { onConflict: 'player_id,tournament_id' });\n        \n        if (updateError) {\n          console.error('Error with compound key upsert:', updateError);\n          \n          // Try with just player_id if the compound key fails\n          console.log('Retrying with player_id only as conflict resolution...');\n          const { error: retryError } = await supabaseAdmin\n            .from('golfer_scores')\n            .upsert(playersToUpdate, { onConflict: 'player_id' });\n          \n          if (retryError) {\n            throw retryError;\n          }\n        }\n      } catch (error) {\n        console.error('Player upsert error:', error);\n        throw new Error(`Failed to update players: ${JSON.stringify(error)}`);\n      }\n    }\n\n    // 3. Calculate scores for all entries\n    // Get all entries for this tournament\n    const { data: entries, error: entriesError } = await supabaseAdmin\n      .from('entries')\n      .select('*')\n      .eq('tournament_id', activeTournament.id);\n\n    if (entriesError) {\n      console.error('Error fetching entries:', entriesError);\n      throw new Error(`Failed to fetch entries: ${JSON.stringify(entriesError)}`);\n    }\n\n    // Check if entries is an array and not empty\n    if (!entries || !Array.isArray(entries)) {\n      console.log('No entries found or entries is not an array:', entries);\n      console.log('Skipping entry score calculations');\n      return { success: true, message: 'Tournament updated successfully (no entries to update)' };\n    }\n\n    if (entries.length === 0) {\n      console.log('No entries found for this tournament');\n      return { success: true, message: 'Tournament updated successfully (no entries to update)' };\n    }\n\n    console.log(`Found ${entries.length} entries to process`);\n\n    // Get all current scores\n    const { data: scores, error: scoresError } = await supabaseAdmin\n      .from('golfer_scores')\n      .select('player_id,total,position')\n      .eq('tournament_id', activeTournament.id);\n\n    if (scoresError) {\n      console.error('Error fetching golfer scores:', scoresError);\n      throw new Error(`Failed to fetch golfer scores: ${JSON.stringify(scoresError)}`);\n    }\n\n    // Create scores map for quick lookup\n    const scoresMap = new Map();\n    if (scores && Array.isArray(scores)) {\n      console.log(`Found ${scores.length} golfer scores`);\n      scores.forEach(score => {\n        if (score && score.player_id) {\n          scoresMap.set(score.player_id, score);\n        }\n      });\n    } else {\n      console.log('No golfer scores found or scores is not an array:', scores);\n    }\n\n    // Prepare batch updates for entries\n    const entryUpdates = [];\n    \n    // Calculate score for each entry\n    for (const entry of entries) {\n      try {\n        if (!entry || typeof entry !== 'object') {\n          console.log('Skipping invalid entry:', entry);\n          continue;\n        }\n\n        if (!entry.id) {\n          console.log('Skipping entry without ID:', entry);\n          continue;\n        }\n\n        console.log(`Processing entry ${entry.id} (${entry.entry_name || 'unnamed'})`);\n        \n        const golferIds = [\n          entry.tier1_golfer1, entry.tier1_golfer2,\n          entry.tier2_golfer1, entry.tier2_golfer2,\n          entry.tier3_golfer1, entry.tier3_golfer2,\n          entry.tier4_golfer1, entry.tier4_golfer2,\n          entry.tier5_golfer1, entry.tier5_golfer2\n        ].filter(id => id); // Filter out null/undefined IDs\n        \n        if (golferIds.length === 0) {\n          console.log(`Entry ${entry.id} has no golfers, skipping`);\n          continue;\n        }\n        \n        const golferScores = golferIds\n          .map(id => {\n            const score = scoresMap.get(id);\n            if (!score) {\n              console.log(`  No score found for golfer ${id}`);\n            }\n            return score;\n          })\n          .filter((score) => {\n            if (!score) return false;\n            return 'total' in score && 'position' in score && 'player_id' in score;\n          });\n\n        if (golferScores.length === 0) {\n          console.log(`  No valid golfer scores found for entry ${entry.id}, skipping`);\n          continue;\n        }\n\n        // Log the golfer scores being used for calculation\n        console.log(`Calculating score for entry ${entry.id} (${entry.entry_name || 'unnamed'}):`);\n        golferScores.forEach(score => {\n          console.log(`  Player ${score.player_id}: position=${score.position}, total=${score.total}`);\n        });\n\n        const entryScore = calculateEntryScore(golferScores);\n        \n        // Log the calculated score\n        console.log(`  Calculated score: ${entryScore}`);\n\n        // Add to batch updates\n        entryUpdates.push({\n          id: entry.id,\n          calculated_score: entryScore\n        });\n      } catch (error) {\n        console.error(`Error processing entry ${entry?.id || 'unknown'}:`, error);\n        // Continue with other entries instead of failing the whole batch\n      }\n    }\n    \n    // Update all entries in a single batch\n    if (entryUpdates.length > 0) {\n      console.log(`Updating scores for ${entryUpdates.length} entries in batch`);\n      try {\n        const { error: updateError } = await supabaseAdmin\n          .from('entries')\n          .upsert(entryUpdates, { onConflict: 'id' });\n\n        if (updateError) {\n          console.error('Entry upsert error:', updateError);\n          throw updateError;\n        }\n      } catch (error) {\n        console.error('Failed to update entry scores:', error);\n        throw new Error(`Failed to update entry scores: ${JSON.stringify(error)}`);\n      }\n    }\n\n    return { success: true, message: 'Tournament updated successfully' };\n  } catch (error) {\n    // Improve error handling to provide more detailed error messages\n    console.error('Error details:', error);\n    \n    let errorMessage;\n    if (error instanceof Error) {\n      errorMessage = error.message;\n    } else if (typeof error === 'object') {\n      try {\n        errorMessage = JSON.stringify(error);\n      } catch (e) {\n        errorMessage = 'Unknown error object that cannot be stringified';\n      }\n    } else {\n      errorMessage = String(error);\n    }\n    \n    return { success: false, message: `Error: ${errorMessage}` };\n  }\n}\n\n// Cloudflare Worker handler\nexport default {\n  async scheduled(event, env, ctx) {\n    const result = await updateTournament(env);\n    if (!result.success) {\n      console.error(result.message);\n    }\n    return result;\n  },\n  \n  async fetch(request, env, ctx) {\n    // Allow manual triggering via HTTP request\n    const result = await updateTournament(env);\n    return new Response(JSON.stringify(result), {\n      headers: { 'Content-Type': 'application/json' }\n    });\n  }\n}; ", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"/Volumes/icecop15/apps/MajorsPool/scripts/cloudflare-update-tournament.js\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"/opt/homebrew/lib/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts\";\nimport * as __MIDDLEWARE_1__ from \"/opt/homebrew/lib/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts\";\n\n\t\t\t\texport * from \"/Volumes/icecop15/apps/MajorsPool/scripts/cloudflare-update-tournament.js\";\n\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default,__MIDDLEWARE_1__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"/Volumes/icecop15/apps/MajorsPool/.wrangler/tmp/bundle-AcaGHP/middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"/opt/homebrew/lib/node_modules/wrangler/templates/middleware/common.ts\";\nimport type { WorkerEntrypointConstructor } from \"/Volumes/icecop15/apps/MajorsPool/.wrangler/tmp/bundle-AcaGHP/middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"/Volumes/icecop15/apps/MajorsPool/.wrangler/tmp/bundle-AcaGHP/middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n"],
  "mappings": ";;;;AAAA,IAAM,OAAO,oBAAI,IAAI;AAErB,SAAS,SAAS,SAAS,MAAM;AAChC,QAAM,MACL,mBAAmB,MAChB,UACA,IAAI;AAAA,KACH,OAAO,YAAY,WACjB,IAAI,QAAQ,SAAS,IAAI,IACzB,SACD;AAAA,EACH;AACH,MAAI,IAAI,QAAQ,IAAI,SAAS,SAAS,IAAI,aAAa,UAAU;AAChE,QAAI,CAAC,KAAK,IAAI,IAAI,SAAS,CAAC,GAAG;AAC9B,WAAK,IAAI,IAAI,SAAS,CAAC;AACvB,cAAQ;AAAA,QACP;AAAA,KACO,IAAI,SAAS;AAAA;AAAA,MACrB;AAAA,IACD;AAAA,EACD;AACD;AAnBS;AAqBT,WAAW,QAAQ,IAAI,MAAM,WAAW,OAAO;AAAA,EAC9C,MAAM,QAAQ,SAAS,UAAU;AAChC,UAAM,CAAC,SAAS,IAAI,IAAI;AACxB,aAAS,SAAS,IAAI;AACtB,WAAO,QAAQ,MAAM,QAAQ,SAAS,QAAQ;AAAA,EAC/C;AACD,CAAC;;;ACfD,IAAM,aAAa;AAAA,EACjB,OAAO;AAAA;AAAA,EACP,SAAS;AAAA,EACT,SAAS;AAAA,IACP,mBAAmB;AAAA,IACnB,kBAAkB;AAAA,EACpB;AACF;AAQA,eAAe,SAAS,UAAU,SAAS,CAAC,GAAG;AAC7C,QAAM,cAAc,IAAI,gBAAgB;AAAA,IACtC,GAAG;AAAA,IACH,OAAO,WAAW;AAAA,EACpB,CAAC,EAAE,SAAS;AAEZ,QAAM,MAAM,GAAG,WAAW,UAAU,YAAY;AAEhD,MAAI;AACF,UAAM,WAAW,MAAM,MAAM,KAAK;AAAA,MAChC,QAAQ;AAAA,MACR,SAAS,WAAW;AAAA,IACtB,CAAC;AAED,UAAM,SAAS,MAAM,SAAS,KAAK;AACnC,WAAO,KAAK,MAAM,MAAM;AAAA,EAC1B,SAAS,OAAP;AACA,YAAQ,MAAM,cAAc,KAAK;AACjC,UAAM;AAAA,EACR;AACF;AApBe;AA2Bf,eAAe,cAAc,SAAS;AACpC,SAAO,SAAS,eAAe;AAAA,IAC7B;AAAA,IACA,MAAM;AAAA;AAAA,EACR,CAAC;AACH;AALe;AAYf,eAAe,yBAAyB,SAAS;AAC/C,QAAM,WAAW,MAAM,SAAS,gBAAgB;AAAA,IAC9C;AAAA,IACA,MAAM;AAAA,EACR,CAAC;AAED,SAAO;AACT;AAPe;AAcf,SAAS,oBAAoB,cAAc;AAEzC,QAAM,gBAAgB,aAAa,IAAI,YAAU;AAC/C,QAAI,CAAC,OAAO,MAAM,IAAI,EAAE,SAAS,OAAO,QAAQ,GAAG;AACjD,aAAO;AAAA,IACT;AACA,QAAI,OAAO,UAAU;AAAK,aAAO;AACjC,WAAO,OAAO,MAAM,WAAW,GAAG,IAC9B,CAAC,OAAO,OAAO,MAAM,MAAM,CAAC,CAAC,IAC7B,OAAO,OAAO,MAAM,QAAQ,KAAK,EAAE,CAAC;AAAA,EAC1C,CAAC;AAGD,gBAAc,KAAK,CAAC,GAAG,MAAM,IAAI,CAAC;AAGlC,MAAI,gBAAgB;AACpB,gBAAc,QAAQ,CAAC,OAAO,UAAU;AACtC,UAAM,UAAU,KAAK,IAAI,IAAK,QAAQ,CAAE;AACxC,qBAAiB,QAAQ;AAAA,EAC3B,CAAC;AAGD,QAAM,cAAc,cAAc,MAAM,GAAG,CAAC,EAAE,OAAO,CAAC,KAAK,UAAU,MAAM,OAAO,CAAC;AAGnF,SAAO,cAAc;AACvB;AA3BS;AAmCT,SAAS,qBAAqB,aAAa,aAAa;AAGtD,SAAO;AAAA,IACL,MAAM,CAAC,WAAW;AAAA,MAChB,QAAQ,CAAC,aAAa;AAAA,QACpB,IAAI,CAAC,QAAQ,WAAW;AAAA,UACtB,QAAQ,YAAY;AAClB,gBAAI;AACF,sBAAQ,IAAI,8BAA8B,eAAe,UAAU,OAAO;AAC1E,oBAAM,WAAW,MAAM,MAAM,GAAG,uBAAuB,gBAAgB,WAAW,aAAa,SAAS;AAAA,gBACtG,SAAS;AAAA,kBACP,UAAU;AAAA,kBACV,iBAAiB,UAAU;AAAA,kBAC3B,gBAAgB;AAAA,gBAClB;AAAA,cACF,CAAC;AAED,kBAAI,CAAC,SAAS,IAAI;AAChB,wBAAQ,MAAM,mBAAmB,SAAS,YAAY,SAAS,YAAY;AAC3E,uBAAO,EAAE,MAAM,MAAM,OAAO,EAAE,SAAS,SAAS,WAAW,EAAE;AAAA,cAC/D;AAEA,oBAAM,OAAO,MAAM,SAAS,KAAK,EAAE,MAAM,OAAK;AAC5C,wBAAQ,MAAM,qBAAqB,CAAC;AACpC,uBAAO,CAAC;AAAA,cACV,CAAC;AAED,kBAAI,CAAC,MAAM,QAAQ,IAAI,GAAG;AACxB,wBAAQ,KAAK,0BAA0B,OAAO,MAAM;AACpD,uBAAO,EAAE,MAAM,MAAM,OAAO,KAAK;AAAA,cACnC;AAEA,qBAAO,EAAE,MAAM,KAAK,CAAC,KAAK,MAAM,OAAO,KAAK;AAAA,YAC9C,SAAS,OAAP;AACA,sBAAQ,MAAM,uBAAuB,KAAK;AAC1C,qBAAO,EAAE,MAAM,MAAM,OAAO,EAAE,SAAS,OAAO,KAAK,EAAE,EAAE;AAAA,YACzD;AAAA,UACF;AAAA,UACA,SAAS,YAAY;AACnB,gBAAI;AACF,sBAAQ,IAAI,uBAAuB,eAAe,UAAU,OAAO;AACnE,oBAAM,WAAW,MAAM,MAAM,GAAG,uBAAuB,gBAAgB,WAAW,aAAa,SAAS;AAAA,gBACtG,SAAS;AAAA,kBACP,UAAU;AAAA,kBACV,iBAAiB,UAAU;AAAA,kBAC3B,gBAAgB;AAAA,gBAClB;AAAA,cACF,CAAC;AAED,kBAAI,CAAC,SAAS,IAAI;AAChB,wBAAQ,MAAM,mBAAmB,SAAS,YAAY,SAAS,YAAY;AAC3E,uBAAO,EAAE,MAAM,CAAC,GAAG,OAAO,EAAE,SAAS,SAAS,WAAW,EAAE;AAAA,cAC7D;AAEA,oBAAM,OAAO,MAAM,SAAS,KAAK,EAAE,MAAM,OAAK;AAC5C,wBAAQ,MAAM,qBAAqB,CAAC;AACpC,uBAAO,CAAC;AAAA,cACV,CAAC;AAED,kBAAI,CAAC,MAAM,QAAQ,IAAI,GAAG;AACxB,wBAAQ,KAAK,0BAA0B,OAAO,MAAM;AACpD,uBAAO,EAAE,MAAM,CAAC,GAAG,OAAO,KAAK;AAAA,cACjC;AAEA,qBAAO,EAAE,MAAM,OAAO,KAAK;AAAA,YAC7B,SAAS,OAAP;AACA,sBAAQ,MAAM,kBAAkB,KAAK;AACrC,qBAAO,EAAE,MAAM,CAAC,GAAG,OAAO,EAAE,SAAS,OAAO,KAAK,EAAE,EAAE;AAAA,YACvD;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAAA,MACA,QAAQ,CAAC,UAAU;AAAA,QACjB,IAAI,OAAO,QAAQ,UAAU;AAC3B,gBAAM,WAAW,MAAM,MAAM,GAAG,uBAAuB,SAAS,aAAa,SAAS;AAAA,YACpF,QAAQ;AAAA,YACR,SAAS;AAAA,cACP,UAAU;AAAA,cACV,iBAAiB,UAAU;AAAA,cAC3B,gBAAgB;AAAA,cAChB,UAAU;AAAA,YACZ;AAAA,YACA,MAAM,KAAK,UAAU,IAAI;AAAA,UAC3B,CAAC;AAED,cAAI,CAAC,SAAS,IAAI;AAChB,kBAAM,QAAQ,MAAM,SAAS,KAAK;AAClC,mBAAO,EAAE,MAAM;AAAA,UACjB;AAEA,iBAAO,EAAE,OAAO,KAAK;AAAA,QACvB;AAAA,MACF;AAAA,MACA,QAAQ,OAAO,SAAS;AACtB,cAAM,WAAW,MAAM,MAAM,GAAG,uBAAuB,SAAS;AAAA,UAC9D,QAAQ;AAAA,UACR,SAAS;AAAA,YACP,UAAU;AAAA,YACV,iBAAiB,UAAU;AAAA,YAC3B,gBAAgB;AAAA,YAChB,UAAU;AAAA,UACZ;AAAA,UACA,MAAM,KAAK,UAAU,IAAI;AAAA,QAC3B,CAAC;AAED,YAAI,CAAC,SAAS,IAAI;AAChB,gBAAM,QAAQ,MAAM,SAAS,KAAK;AAClC,iBAAO,EAAE,MAAM;AAAA,QACjB;AAEA,eAAO,EAAE,OAAO,KAAK;AAAA,MACvB;AAAA,MACA,QAAQ,OAAO,MAAM,UAAU,CAAC,MAAM;AAEpC,gBAAQ,IAAI,aAAa,MAAM,QAAQ,IAAI,IAAI,KAAK,SAAS,gBAAgB,OAAO;AACpF,gBAAQ,IAAI,mBAAmB,OAAO;AAEtC,YAAI,MAAM,GAAG,uBAAuB;AAGpC,YAAI,QAAQ,YAAY;AACtB,iBAAO,gBAAgB,QAAQ;AAAA,QACjC;AAEA,gBAAQ,IAAI,eAAe,GAAG;AAE9B,cAAM,WAAW,MAAM,MAAM,KAAK;AAAA,UAChC,QAAQ;AAAA,UACR,SAAS;AAAA,YACP,UAAU;AAAA,YACV,iBAAiB,UAAU;AAAA,YAC3B,gBAAgB;AAAA,YAChB,UAAU;AAAA,UACZ;AAAA,UACA,MAAM,KAAK,UAAU,IAAI;AAAA,QAC3B,CAAC;AAED,YAAI,CAAC,SAAS,IAAI;AAChB,gBAAM,YAAY,MAAM,SAAS,KAAK,EAAE,MAAM,OAAO;AAAA,YACnD,SAAS,SAAS;AAAA,YAClB,QAAQ,SAAS;AAAA,UACnB,EAAE;AACF,kBAAQ,MAAM,iBAAiB,SAAS,YAAY,SAAS;AAC7D,iBAAO,EAAE,OAAO,UAAU;AAAA,QAC5B;AAEA,eAAO,EAAE,OAAO,KAAK;AAAA,MACvB;AAAA,IACF;AAAA,EACF;AACF;AAvJS;AA8JT,eAAe,iBAAiB,KAAK;AACnC,MAAI;AAEF,UAAM,gBAAgB;AAAA,MACpB,IAAI;AAAA,MACJ,IAAI;AAAA,IACN;AAGA,UAAM,EAAE,MAAM,kBAAkB,OAAO,gBAAgB,IAAI,MAAM,cAC9D,KAAK,aAAa,EAClB,OAAO,2BAA2B,EAClC,GAAG,aAAa,IAAI,EACpB,OAAO;AAEV,QAAI,mBAAmB,CAAC,kBAAkB;AACxC,YAAM,IAAI,MAAM,4BAA4B;AAAA,IAC9C;AAGA,UAAM,iBAAiB,MAAM,cAAc,iBAAiB,iBAAiB;AAG7E,UAAM,cAAc,MAAM,yBAAyB,iBAAiB,iBAAiB;AAGrF,UAAM,WAAW,YAAY,WAAW,CAAC,GAAG;AAG5C,UAAM,EAAE,OAAO,sBAAsB,IAAI,MAAM,cAC5C,KAAK,aAAa,EAClB,OAAO;AAAA,MACN,QAAQ,eAAe;AAAA,MACvB,eAAe,eAAe,aAAa,cAAc,eAAe;AAAA,MACxE,WAAW,YAAY;AAAA;AAAA,IACzB,CAAC,EACA,GAAG,MAAM,iBAAiB,EAAE;AAE/B,QAAI,uBAAuB;AACzB,YAAM;AAAA,IACR;AAEA,QAAI,CAAC,YAAY,iBAAiB,QAAQ;AACxC,YAAM,IAAI,MAAM,iCAAiC;AAAA,IACnD;AAGA,YAAQ,IAAI,cAAc,YAAY,gBAAgB,2BAA2B;AAGjF,UAAM,EAAE,MAAM,iBAAiB,OAAO,qBAAqB,IAAI,MAAM,cAClE,KAAK,eAAe,EACpB,OAAO,WAAW,EAClB,GAAG,iBAAiB,iBAAiB,EAAE,EACvC,QAAQ;AAEX,QAAI,sBAAsB;AACxB,cAAQ,MAAM,oCAAoC,oBAAoB;AACtE,YAAM,IAAI,MAAM,qCAAqC,KAAK,UAAU,oBAAoB,GAAG;AAAA,IAC7F;AAGA,UAAM,oBAAoB,oBAAI,IAAI;AAClC,QAAI,mBAAmB,MAAM,QAAQ,eAAe,GAAG;AACrD,cAAQ,IAAI,SAAS,gBAAgB,yBAAyB;AAC9D,sBAAgB,QAAQ,YAAU;AAChC,YAAI,UAAU,OAAO,WAAW;AAC9B,4BAAkB,IAAI,OAAO,WAAW,IAAI;AAAA,QAC9C;AAAA,MACF,CAAC;AAAA,IACH,OAAO;AACL,cAAQ,IAAI,iEAAiE,eAAe;AAAA,IAC9F;AAGA,UAAM,kBAAkB,CAAC;AACzB,UAAM,kBAAkB,CAAC;AAEzB,eAAW,UAAU,YAAY,iBAAiB;AAChD,YAAM,aAAa;AAAA,QACjB,WAAW,OAAO;AAAA,QAClB,YAAY,OAAO;AAAA,QACnB,WAAW,OAAO;AAAA,QAClB,YAAY,OAAO,aAAa;AAAA,QAChC,WAAW,OAAO;AAAA,QAClB,QAAQ,OAAO;AAAA,QACf,UAAU,OAAO;AAAA,QACjB,OAAO,OAAO;AAAA,QACd,qBAAqB,OAAO,qBAAqB;AAAA,QACjD,cAAc,OAAO,aAAa,aAAa,OAAO,OAAO,YAAY,UAAU,IAAI;AAAA,QACvF,eAAe,OAAO,cAAc,aAAa,OAAO,OAAO,aAAa,UAAU,IAAI;AAAA,QAC1F,gBAAgB,OAAO;AAAA,QACvB,MAAM,OAAO;AAAA,QACb,eAAe,OAAO,cAAc,aAAa,OAAO,OAAO,aAAa,UAAU,IAAI;AAAA,QAC1F,UAAU,OAAO,WAAW;AAAA,QAC5B,eAAe,iBAAiB;AAAA,MAClC;AAEA,UAAI,kBAAkB,IAAI,OAAO,QAAQ,GAAG;AAC1C,wBAAgB,KAAK,UAAU;AAAA,MACjC,OAAO;AACL,wBAAgB,KAAK,UAAU;AAAA,MACjC;AAAA,IACF;AAGA,QAAI,gBAAgB,SAAS,GAAG;AAC9B,cAAQ,IAAI,aAAa,gBAAgB,6BAA6B;AACtE,YAAM,EAAE,OAAO,YAAY,IAAI,MAAM,cAClC,KAAK,eAAe,EACpB,OAAO,eAAe;AAEzB,UAAI,aAAa;AACf,cAAM;AAAA,MACR;AAAA,IACF;AAGA,QAAI,gBAAgB,SAAS,GAAG;AAC9B,cAAQ,IAAI,YAAY,gBAAgB,yBAAyB;AAIjE,UAAI;AAEF,cAAM,EAAE,OAAO,YAAY,IAAI,MAAM,cAClC,KAAK,eAAe,EACpB,OAAO,iBAAiB,EAAE,YAAY,0BAA0B,CAAC;AAEpE,YAAI,aAAa;AACf,kBAAQ,MAAM,mCAAmC,WAAW;AAG5D,kBAAQ,IAAI,wDAAwD;AACpE,gBAAM,EAAE,OAAO,WAAW,IAAI,MAAM,cACjC,KAAK,eAAe,EACpB,OAAO,iBAAiB,EAAE,YAAY,YAAY,CAAC;AAEtD,cAAI,YAAY;AACd,kBAAM;AAAA,UACR;AAAA,QACF;AAAA,MACF,SAAS,OAAP;AACA,gBAAQ,MAAM,wBAAwB,KAAK;AAC3C,cAAM,IAAI,MAAM,6BAA6B,KAAK,UAAU,KAAK,GAAG;AAAA,MACtE;AAAA,IACF;AAIA,UAAM,EAAE,MAAM,SAAS,OAAO,aAAa,IAAI,MAAM,cAClD,KAAK,SAAS,EACd,OAAO,GAAG,EACV,GAAG,iBAAiB,iBAAiB,EAAE;AAE1C,QAAI,cAAc;AAChB,cAAQ,MAAM,2BAA2B,YAAY;AACrD,YAAM,IAAI,MAAM,4BAA4B,KAAK,UAAU,YAAY,GAAG;AAAA,IAC5E;AAGA,QAAI,CAAC,WAAW,CAAC,MAAM,QAAQ,OAAO,GAAG;AACvC,cAAQ,IAAI,gDAAgD,OAAO;AACnE,cAAQ,IAAI,mCAAmC;AAC/C,aAAO,EAAE,SAAS,MAAM,SAAS,yDAAyD;AAAA,IAC5F;AAEA,QAAI,QAAQ,WAAW,GAAG;AACxB,cAAQ,IAAI,sCAAsC;AAClD,aAAO,EAAE,SAAS,MAAM,SAAS,yDAAyD;AAAA,IAC5F;AAEA,YAAQ,IAAI,SAAS,QAAQ,2BAA2B;AAGxD,UAAM,EAAE,MAAM,QAAQ,OAAO,YAAY,IAAI,MAAM,cAChD,KAAK,eAAe,EACpB,OAAO,0BAA0B,EACjC,GAAG,iBAAiB,iBAAiB,EAAE;AAE1C,QAAI,aAAa;AACf,cAAQ,MAAM,iCAAiC,WAAW;AAC1D,YAAM,IAAI,MAAM,kCAAkC,KAAK,UAAU,WAAW,GAAG;AAAA,IACjF;AAGA,UAAM,YAAY,oBAAI,IAAI;AAC1B,QAAI,UAAU,MAAM,QAAQ,MAAM,GAAG;AACnC,cAAQ,IAAI,SAAS,OAAO,sBAAsB;AAClD,aAAO,QAAQ,WAAS;AACtB,YAAI,SAAS,MAAM,WAAW;AAC5B,oBAAU,IAAI,MAAM,WAAW,KAAK;AAAA,QACtC;AAAA,MACF,CAAC;AAAA,IACH,OAAO;AACL,cAAQ,IAAI,qDAAqD,MAAM;AAAA,IACzE;AAGA,UAAM,eAAe,CAAC;AAGtB,eAAW,SAAS,SAAS;AAC3B,UAAI;AACF,YAAI,CAAC,SAAS,OAAO,UAAU,UAAU;AACvC,kBAAQ,IAAI,2BAA2B,KAAK;AAC5C;AAAA,QACF;AAEA,YAAI,CAAC,MAAM,IAAI;AACb,kBAAQ,IAAI,8BAA8B,KAAK;AAC/C;AAAA,QACF;AAEA,gBAAQ,IAAI,oBAAoB,MAAM,OAAO,MAAM,cAAc,YAAY;AAE7E,cAAM,YAAY;AAAA,UAChB,MAAM;AAAA,UAAe,MAAM;AAAA,UAC3B,MAAM;AAAA,UAAe,MAAM;AAAA,UAC3B,MAAM;AAAA,UAAe,MAAM;AAAA,UAC3B,MAAM;AAAA,UAAe,MAAM;AAAA,UAC3B,MAAM;AAAA,UAAe,MAAM;AAAA,QAC7B,EAAE,OAAO,QAAM,EAAE;AAEjB,YAAI,UAAU,WAAW,GAAG;AAC1B,kBAAQ,IAAI,SAAS,MAAM,6BAA6B;AACxD;AAAA,QACF;AAEA,cAAM,eAAe,UAClB,IAAI,QAAM;AACT,gBAAM,QAAQ,UAAU,IAAI,EAAE;AAC9B,cAAI,CAAC,OAAO;AACV,oBAAQ,IAAI,+BAA+B,IAAI;AAAA,UACjD;AACA,iBAAO;AAAA,QACT,CAAC,EACA,OAAO,CAAC,UAAU;AACjB,cAAI,CAAC;AAAO,mBAAO;AACnB,iBAAO,WAAW,SAAS,cAAc,SAAS,eAAe;AAAA,QACnE,CAAC;AAEH,YAAI,aAAa,WAAW,GAAG;AAC7B,kBAAQ,IAAI,4CAA4C,MAAM,cAAc;AAC5E;AAAA,QACF;AAGA,gBAAQ,IAAI,+BAA+B,MAAM,OAAO,MAAM,cAAc,aAAa;AACzF,qBAAa,QAAQ,WAAS;AAC5B,kBAAQ,IAAI,YAAY,MAAM,uBAAuB,MAAM,mBAAmB,MAAM,OAAO;AAAA,QAC7F,CAAC;AAED,cAAM,aAAa,oBAAoB,YAAY;AAGnD,gBAAQ,IAAI,uBAAuB,YAAY;AAG/C,qBAAa,KAAK;AAAA,UAChB,IAAI,MAAM;AAAA,UACV,kBAAkB;AAAA,QACpB,CAAC;AAAA,MACH,SAAS,OAAP;AACA,gBAAQ,MAAM,0BAA0B,OAAO,MAAM,cAAc,KAAK;AAAA,MAE1E;AAAA,IACF;AAGA,QAAI,aAAa,SAAS,GAAG;AAC3B,cAAQ,IAAI,uBAAuB,aAAa,yBAAyB;AACzE,UAAI;AACF,cAAM,EAAE,OAAO,YAAY,IAAI,MAAM,cAClC,KAAK,SAAS,EACd,OAAO,cAAc,EAAE,YAAY,KAAK,CAAC;AAE5C,YAAI,aAAa;AACf,kBAAQ,MAAM,uBAAuB,WAAW;AAChD,gBAAM;AAAA,QACR;AAAA,MACF,SAAS,OAAP;AACA,gBAAQ,MAAM,kCAAkC,KAAK;AACrD,cAAM,IAAI,MAAM,kCAAkC,KAAK,UAAU,KAAK,GAAG;AAAA,MAC3E;AAAA,IACF;AAEA,WAAO,EAAE,SAAS,MAAM,SAAS,kCAAkC;AAAA,EACrE,SAAS,OAAP;AAEA,YAAQ,MAAM,kBAAkB,KAAK;AAErC,QAAI;AACJ,QAAI,iBAAiB,OAAO;AAC1B,qBAAe,MAAM;AAAA,IACvB,WAAW,OAAO,UAAU,UAAU;AACpC,UAAI;AACF,uBAAe,KAAK,UAAU,KAAK;AAAA,MACrC,SAAS,GAAP;AACA,uBAAe;AAAA,MACjB;AAAA,IACF,OAAO;AACL,qBAAe,OAAO,KAAK;AAAA,IAC7B;AAEA,WAAO,EAAE,SAAS,OAAO,SAAS,UAAU,eAAe;AAAA,EAC7D;AACF;AAnTe;AAsTf,IAAO,uCAAQ;AAAA,EACb,MAAM,UAAU,OAAO,KAAK,KAAK;AAC/B,UAAM,SAAS,MAAM,iBAAiB,GAAG;AACzC,QAAI,CAAC,OAAO,SAAS;AACnB,cAAQ,MAAM,OAAO,OAAO;AAAA,IAC9B;AACA,WAAO;AAAA,EACT;AAAA,EAEA,MAAM,MAAM,SAAS,KAAK,KAAK;AAE7B,UAAM,SAAS,MAAM,iBAAiB,GAAG;AACzC,WAAO,IAAI,SAAS,KAAK,UAAU,MAAM,GAAG;AAAA,MAC1C,SAAS,EAAE,gBAAgB,mBAAmB;AAAA,IAChD,CAAC;AAAA,EACH;AACF;;;ACvlBA,IAAM,YAAwB,8BAAO,SAAS,KAAK,MAAM,kBAAkB;AAC1E,MAAI;AACH,WAAO,MAAM,cAAc,KAAK,SAAS,GAAG;AAAA,EAC7C,UAAE;AACD,QAAI;AACH,UAAI,QAAQ,SAAS,QAAQ,CAAC,QAAQ,UAAU;AAC/C,cAAM,SAAS,QAAQ,KAAK,UAAU;AACtC,eAAO,EAAE,MAAM,OAAO,KAAK,GAAG,MAAM;AAAA,QAAC;AAAA,MACtC;AAAA,IACD,SAAS,GAAP;AACD,cAAQ,MAAM,4CAA4C,CAAC;AAAA,IAC5D;AAAA,EACD;AACD,GAb8B;AAe9B,IAAO,6CAAQ;;;ACRf,SAAS,YAAY,GAAmB;AACvC,SAAO;AAAA,IACN,MAAM,GAAG;AAAA,IACT,SAAS,GAAG,WAAW,OAAO,CAAC;AAAA,IAC/B,OAAO,GAAG;AAAA,IACV,OAAO,GAAG,UAAU,SAAY,SAAY,YAAY,EAAE,KAAK;AAAA,EAChE;AACD;AAPS;AAUT,IAAM,YAAwB,8BAAO,SAAS,KAAK,MAAM,kBAAkB;AAC1E,MAAI;AACH,WAAO,MAAM,cAAc,KAAK,SAAS,GAAG;AAAA,EAC7C,SAAS,GAAP;AACD,UAAM,QAAQ,YAAY,CAAC;AAC3B,WAAO,SAAS,KAAK,OAAO;AAAA,MAC3B,QAAQ;AAAA,MACR,SAAS,EAAE,+BAA+B,OAAO;AAAA,IAClD,CAAC;AAAA,EACF;AACD,GAV8B;AAY9B,IAAO,2CAAQ;;;ACzBJ,IAAM,mCAAmC;AAAA,EAE9B;AAAA,EAAyB;AAC3C;AACA,IAAO,sCAAQ;;;ACcnB,IAAM,wBAAsC,CAAC;AAKtC,SAAS,uBAAuB,MAAqC;AAC3E,wBAAsB,KAAK,GAAG,KAAK,KAAK,CAAC;AAC1C;AAFgB;AAShB,SAAS,uBACR,SACA,KACA,KACA,UACA,iBACsB;AACtB,QAAM,CAAC,MAAM,GAAG,IAAI,IAAI;AACxB,QAAM,gBAAmC;AAAA,IACxC;AAAA,IACA,KAAK,YAAY,QAAQ;AACxB,aAAO,uBAAuB,YAAY,QAAQ,KAAK,UAAU,IAAI;AAAA,IACtE;AAAA,EACD;AACA,SAAO,KAAK,SAAS,KAAK,KAAK,aAAa;AAC7C;AAfS;AAiBF,SAAS,kBACf,SACA,KACA,KACA,UACA,iBACsB;AACtB,SAAO,uBAAuB,SAAS,KAAK,KAAK,UAAU;AAAA,IAC1D,GAAG;AAAA,IACH;AAAA,EACD,CAAC;AACF;AAXgB;;;AC3ChB,IAAM,iCAAN,MAAoE;AAAA,EAGnE,YACU,eACA,MACT,SACC;AAHQ;AACA;AAGT,SAAK,WAAW;AAAA,EACjB;AAAA,EARS;AAAA,EAUT,UAAU;AACT,QAAI,EAAE,gBAAgB,iCAAiC;AACtD,YAAM,IAAI,UAAU,oBAAoB;AAAA,IACzC;AAEA,SAAK,SAAS;AAAA,EACf;AACD;AAlBM;AAoBN,SAAS,oBAAoB,QAA0C;AAEtE,MACC,qCAAqC,UACrC,iCAAiC,WAAW,GAC3C;AACD,WAAO;AAAA,EACR;AAEA,aAAW,cAAc,kCAAkC;AAC1D,wBAAoB,UAAU;AAAA,EAC/B;AAEA,QAAM,kBAA+C,gCACpD,SACA,KACA,KACC;AACD,QAAI,OAAO,UAAU,QAAW;AAC/B,YAAM,IAAI,MAAM,6CAA6C;AAAA,IAC9D;AACA,WAAO,OAAO,MAAM,SAAS,KAAK,GAAG;AAAA,EACtC,GATqD;AAWrD,SAAO;AAAA,IACN,GAAG;AAAA,IACH,MAAM,SAAS,KAAK,KAAK;AACxB,YAAM,aAAyB,gCAAU,MAAM,MAAM;AACpD,YAAI,SAAS,eAAe,OAAO,cAAc,QAAW;AAC3D,gBAAM,aAAa,IAAI;AAAA,YACtB,KAAK,IAAI;AAAA,YACT,KAAK,QAAQ;AAAA,YACb,MAAM;AAAA,YAAC;AAAA,UACR;AACA,iBAAO,OAAO,UAAU,YAAY,KAAK,GAAG;AAAA,QAC7C;AAAA,MACD,GAT+B;AAU/B,aAAO,kBAAkB,SAAS,KAAK,KAAK,YAAY,eAAe;AAAA,IACxE;AAAA,EACD;AACD;AAxCS;AA0CT,SAAS,qBACR,OAC8B;AAE9B,MACC,qCAAqC,UACrC,iCAAiC,WAAW,GAC3C;AACD,WAAO;AAAA,EACR;AAEA,aAAW,cAAc,kCAAkC;AAC1D,wBAAoB,UAAU;AAAA,EAC/B;AAGA,SAAO,cAAc,MAAM;AAAA,IAC1B,mBAAyE,CACxE,SACA,KACA,QACI;AACJ,WAAK,MAAM;AACX,WAAK,MAAM;AACX,UAAI,MAAM,UAAU,QAAW;AAC9B,cAAM,IAAI,MAAM,sDAAsD;AAAA,MACvE;AACA,aAAO,MAAM,MAAM,OAAO;AAAA,IAC3B;AAAA,IAEA,cAA0B,CAAC,MAAM,SAAS;AACzC,UAAI,SAAS,eAAe,MAAM,cAAc,QAAW;AAC1D,cAAM,aAAa,IAAI;AAAA,UACtB,KAAK,IAAI;AAAA,UACT,KAAK,QAAQ;AAAA,UACb,MAAM;AAAA,UAAC;AAAA,QACR;AACA,eAAO,MAAM,UAAU,UAAU;AAAA,MAClC;AAAA,IACD;AAAA,IAEA,MAAM,SAAwD;AAC7D,aAAO;AAAA,QACN;AAAA,QACA,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,MACN;AAAA,IACD;AAAA,EACD;AACD;AAnDS;AAqDT,IAAI;AACJ,IAAI,OAAO,wCAAU,UAAU;AAC9B,kBAAgB,oBAAoB,mCAAK;AAC1C,WAAW,OAAO,wCAAU,YAAY;AACvC,kBAAgB,qBAAqB,mCAAK;AAC3C;AACA,IAAO,kCAAQ;",
  "names": []
}
